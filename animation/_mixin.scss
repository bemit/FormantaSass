////
/// Animation: Mixin
/// ================
/// These mixins generate animation in css, for default-values see config.
/// @group Animation
/// @author Michael Becker
////

/// Makes prefixed transition
/// @access public
/// @param $args - the transition that should be prefixed
@mixin for-transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}
/// Fade effect with included hover
/// @access public
/// @param {Float} $to-opacity [$for-animation-fade-to-opacity] - the opacity that should be applied on hover
/// @param {Int} $duration [$for-animation-fade-duration] - the duration the opacity should long
/// @param {Float} $timing-function [$for-animation-fade-timing-function] - the css3 transition timing function that should be used
/// @param {Float} $delay [$for-animation-fade-delay] - the delay that should be there before the transition starts
@mixin for-fade($to-opacity: null, $duration: null, $timing-function: null, $delay: null) {
    @if ($duration) {
        $duration: $duration;
    } @else {
        $duration: $for-animation-fade-duration;
    }
    @if ($timing-function) {
        $timing-function: $timing-function;
    } @else {
        $timing-function: $for-animation-fade-timing-function;
    }
    @if ($delay) {
        $delay: $delay;
    } @else {
        @if ($for-animation-fade-delay > 0) {
            $delay: $for-animation-fade-delay;
        }
    }
    @include for-transition(opacity $duration $timing-function $delay);
    &:hover {
        @if ($to-opacity) {
            $to-opacity: $to-opacity;
        } @else {
            $to-opacity: $for-animation-fade-to-opacity;
        }
        opacity: $to-opacity;
    }
}
/// Base mixin for all the zoom
/// @param {String} $bg-url [] - needed for pure css animation, optional for html elements based, will be used as background for zoom effect
/// @param {String} $selector-image [] - selector for thing containing the image for the effect, html or pure pseudo is in use
/// @param {String} $selector-overlay [] - optinal when no overlay wanted, a transparent overlay, behind the content
/// @param {Bool|Color} $bg-overlay [false] - optional, false: not displaying, null: use default config, else: Color Value (rgba(), hex, ..)
/// @param {Int} $to-scale [null] - to which scale the image should animate
/// @param {Int} $to-opacity [null] - to which opacity the overlay should animate
/// @param {Int} $duration [null] - how long the animations should take
/// @param {Int} $timing-function [null] - what css3 timing function should be used for the animation
/// @param {Int} $delay [null] - how long the animation should be delayed
@mixin for-zoom-base($bg-url, $selector-image, $selector-overlay, $bg-overlay: false, $to-scale: null, $to-opacity: null, $duration: null, $timing-function: null, $delay: null) {
    @if ($duration) {
        $duration: $duration;
    } @else {
        $duration: $for-animation-zoom-duration;
    }
    @if ($to-scale) {
        $to-scale: $to-scale;
    } @else {
        $to-scale: $for-animation-zoom-to-scale;
    }
    @if ($timing-function) {
        $timing-function: $timing-function;
    } @else {
        $timing-function: $for-animation-zoom-timing-function;
    }
    @if ($delay) {
        $delay: $delay;
    } @else {
        @if ($for-animation-zoom-delay > 0) {
            $delay: $for-animation-zoom-delay;
        }
    }

    overflow: hidden;
    position: relative;
    // That the content doesn't vanish
    > * {
        position: relative;
        z-index: 2;
    }
    // Image CSS & Overlay CSS
    #{&}#{$selector-image},
    #{&}#{$selector-overlay} {
        content: ' ';
        display: block;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }
    // Image CSS
    &#{$selector-image} {
        -webkit-transition: -moz-transform $duration $timing-function $delay;
        -moz-transition: -webkit-transform $duration $timing-function $delay;
        -o-transition: -o-transform $duration $timing-function $delay;
        transition: transform $duration $timing-function $delay;
        z-index: 0;
    }
    // Overlay CSS
    @if ($bg-overlay != false) {
        &#{$selector-overlay} {
            @if ($bg-overlay) {
                $bg-overlay: $bg-overlay;
            } @else {
                $bg-overlay: $for-animation-zoom-bg-overlay;
            }
            background: $bg-overlay;
            z-index: 1;
            @include for-transition(opacity $duration $timing-function $delay);
        }
    }
    // Effects executing
    &:hover {
        // Image CSS
        &#{$selector-image} {
            @include for-transform(scale($to-scale));
        }
        @if ($bg-overlay != false) {
            // Overlay CSS
            &#{$selector-overlay} {
                @if ($to-opacity) {
                    $to-opacity: $to-opacity;
                } @else {
                    $to-opacity: $for-animation-zoom-to-opacity;
                }
                opacity: $to-opacity;
            }
        }
    }
}
/// Generates a background at this element which zooms in with hover and there could be some overlay over it
/// @param {String} $bg-url [] - will be used as background for zoom effect
/// @param {Bool|Color} $bg-overlay [false] - optional, false: not displaying, null: use default config, else: Color Value (rgba(), hex, ..)
/// @param {Int} $to-scale [null] - to which scale the image should animate
/// @param {Int} $to-opacity [null] - to which opacity the overlay should animate
/// @param {Int} $duration [null] - how long the animations should take
/// @param {Int} $timing-function [null] - what css3 timing function should be used for the animation
/// @param {Int} $delay [null] - how long the animation should be delayed
@mixin for-zoom($bg-url, $bg-overlay: false, $to-scale: null, $to-opacity: null, $duration: null, $timing-function: null, $delay: null) {
    &:before {
        background: url($bg-url) no-repeat;
        background-size: cover;
    }
    $selector-image: '&:before';
    $selector-overlay: '&:after';
    @include for-zoom-base($bg-url, $selector-image, $selector-overlay, $bg-overlay, $to-scale, $to-opacity, $duration, $timing-function, $delay);
}
/// Zoom mixin for html container
/// @param {String} $selector-image [] - selector for thing containing the image for the effect, html or pure pseudo is in use
/// @param {String} $selector-overlay [] - optinal when no overlay wanted, a transparent overlay, behind the content
/// @param {Bool|Color} $bg-overlay [false] - optional, false: not displaying, null: use default config, else: Color Value (rgba(), hex, ..)
/// @param {Int} $to-scale [null] - to which scale the image should animate
/// @param {Int} $to-opacity [null] - to which opacity the overlay should animate
/// @param {Int} $duration [null] - how long the animations should take
/// @param {Int} $timing-function [null] - what css3 timing function should be used for the animation
/// @param {Int} $delay [null] - how long the animation should be delayed
@mixin for-zoom-html($selector-image: null, $selector-overlay: null, $bg-overlay: false, $to-scale: null, $to-opacity: null, $duration: null, $timing-function: null, $delay: null) {
    @if ($selector-image) {

    } @else {
        $selector-image: ' img:first-child';
    }
    @if ($selector-overlay) {

    } @else {
        $selector-overlay: ' .zoom-overlay';
    }
    @include for-zoom-base(null, $selector-image, $selector-overlay, $bg-overlay, $to-scale, $to-opacity, $duration, $timing-function, $delay);
}
