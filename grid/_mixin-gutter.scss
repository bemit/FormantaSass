////
/// Grid: Gutter Mixin
/// ================
///
/// @group Grid:Gutter
/// @author Michael Becker
////

/// Complete responsive gutter
/// @param {String} $max [lgx] - Which gutter size shoud be the maximum, when md the thickest gutter will be $for-gutter-md, takes breakpoint sizes
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter as padding with breakpoints
@mixin for-gutter($min: smx, $max: lgx, $use: padding) {

    @if $min == smx {
        #{$use}: $for-gutter-smx;
    }

    @if $max == smx {
    } @else {
        @if $min == smx or $min == sm {
            @include for-bp-sm-up {
                #{$use}: $for-gutter-sm;
            }
        }
        @if $max == sm {
        } @else {
            @if $min == smx or $min == sm or $min == md {
                @include for-bp-md-up {
                    #{$use}: $for-gutter-md;
                }
            }
            @if $max == md {
            } @else {
                @if $min == smx or $min == sm or $min == md or $min == lg {
                    @include for-bp-lg-up {
                        #{$use}: $for-gutter-lg;
                    }
                }
                @if $max == lg {
                } @else {
                    // no min clause necessary, as lgx will be min when nothing else is min
                    @include for-bp-lgx {
                        #{$use}: $for-gutter-lgx;
                    }
                }
            }
        }
    }
}

/// Applies the thickest gutter as (default) padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thickest($use: padding) {
    #{$use}: $for-gutter-thickest;
}

/// Applies the thicker gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thicker($use: padding) {
    #{$use}: $for-gutter-thicker;
}

/// Applies the thick gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thick($use: padding) {
    #{$use}: $for-gutter-thick;
}

/// Applies the normal gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-normal($use: padding) {
    #{$use}: $for-gutter-normal;
}

/// Applies the thin gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thin($use: padding) {
    #{$use}: $for-gutter-thin;
}

/// Applies the thinner gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thinner($use: padding) {
    #{$use}: $for-gutter-thinner;
}

/// Applies the thinnest gutter as padding
/// @param {String} $use [padding] - What box element should be used to apply the gutter, default is padding
/// @output gutter on box element $use
@mixin for-gutter-thinnest($use: padding) {
    #{$use}: $for-gutter-thinnest;
}