////
/// Grid: Gutter Mixin
/// ================
///
/// @group Grid:Gutter
/// @author Michael Becker
////

/// Complete responsive gutter
/// @param {String} $max [lgx] - Which gutter size shoud be the maximum, when md the thickest gutter will be $for-gutter-md, takes breakpoint sizes
/// @output gutter as padding with breakpoints
@mixin for-gutter($max: lgx) {
    //@include for-bp-smx {
    padding: $for-gutter-smx;
    //}
    @if $max == smx {
    } @else {
        @include for-bp-sm {
            padding: $for-gutter-sm;
        }
        @if $max == sm {
        } @else {
            @include for-bp-md {
                padding: $for-gutter-md;
            }
            @if $max == md {
            } @else {
                @include for-bp-lg {
                    padding: $for-gutter-lg;
                }
                @if $max == lg {
                } @else {
                    @include for-bp-lgx {
                        padding: $for-gutter-lgx;
                    }
                }
            }
        }
    }
}

/// The thickest gutter as padding
/// @output gutter as padding in thickest
@mixin for-gutter-thickest {
    padding: $for-gutter-thickest;
}

/// The thickest gutter as padding
/// @output gutter as padding in thicker
@mixin for-gutter-thicker {
    padding: $for-gutter-thicker;
}

/// The thickest gutter as padding
/// @output gutter as padding in thick
@mixin for-gutter-thick {
    padding: $for-gutter-thick;
}

/// The thickest gutter as padding
/// @output gutter as padding in normal
@mixin for-gutter-normal {
    padding: $for-gutter-normal;
}

/// The thickest gutter as padding
/// @output gutter as padding in thin
@mixin for-gutter-thin {
    padding: $for-gutter-thin;
}

/// The thickest gutter as padding
/// @output gutter as padding in thinner
@mixin for-gutter-thinner {
    padding: $for-gutter-thinner;
}

/// The thickest gutter as padding
/// @output gutter as padding in thinnest
@mixin for-gutter-thinnest {
    padding: $for-gutter-thinnest;
}