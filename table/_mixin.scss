////
/// Table
/// ================
/// selectors:
/// .for-table
/// .for-table-row
/// .for-table-cell
/// .for-table-cell-head
/// @group Table
/// @author Michael Becker
////

/// Table base styling
@mixin for-table-base {
    font: $for-table-font-style $for-table-font-variant $for-table-font-weight #{$for-table-font-size}/#{$for-table-line-height} $for-table-font-family;
    text: {
        decoration: $for-table-text-decoration;
        transform: $for-table-text-transform;
        align: $for-table-text-align;
    }
    border: {
        top: $for-table-border-top;
        right: $for-table-border-right;
        bottom: $for-table-border-bottom;
        left: $for-table-border-left;
        radius: #{$for-table-border-radius-inner} / #{$for-table-border-radius-outer};
        collapse: $for-table-border-collapse;
    }
    a {
        font: $for-table-link-font-style $for-table-link-font-variant $for-table-link-font-weight #{$for-table-link-font-size}/#{$for-table-line-height} $for-table-link-font-family;
        color: $for-table-link-font-color;
        text: {
            decoration: $for-table-link-text-decoration;
            transform: $for-table-link-text-transform;
            align: $for-table-link-text-align;
        }
        line: {
            height: $for-table-link-line-height;
        }
        &:hover {
            font: $for-table-link-hover-font-style $for-table-link-hover-font-variant $for-table-link-hover-font-weight $for-table-link-hover-font-size $for-table-link-hover-font-family;
            color: $for-table-link-hover-font-color;
            text: {
                decoration: $for-table-link-hover-text-decoration;
                transform: $for-table-link-hover-text-transform;
                align: $for-table-link-hover-text-align;
            }
        }
    }
}

/// A table container with all styling
/// @param {Bool} $for-expand [true] - if the table should be over the full available width
/// @param {Bool} $for-layout-fixed [true] - if the tables layout should be fixed, only with this it is possible to define cell widths through css
@mixin for-table($for-expand: true, $for-layout-fixed: true) {
    @if ($for-layout-fixed) {
        table-layout: fixed;
    }
    @if ($for-expand) {
        width: 100%;
    }
    display: table;
    @include for-table-base;
}

/// @output display: table-row
@mixin for-table-row {
    display: table-row;
}

/// @output display: table-cell
@mixin for-table-cell-base {
    display: table-cell;
}

/// Generates the border for a table-cell
/// @output border and display: table-cell
@mixin for-table-cell {
    border: {
        top: $for-table-cell-border-top;
        right: $for-table-cell-border-right;
        bottom: $for-table-cell-border-bottom;
        left: $for-table-cell-border-left;
        radius: #{$for-table-cell-border-radius-inner} / #{$for-table-cell-border-radius-outer};
    }
    padding: $for-table-cell-padding;
    @include for-table-cell-base;
}

/// Generates the styling of a table cell which should be used as a table heading
/// @output font and border styling as well as display: table-cell
@mixin for-table-cell-head {
    @include for-table-cell-base;
    font: $for-table-cell-head-font-style $for-table-cell-head-font-variant $for-table-cell-head-font-weight #{$for-table-cell-head-font-size}/#{$for-table-cell-head-line-height} $for-table-cell-head-font-family;
    color: $for-table-cell-head-font-color;
    background: $for-table-cell-head-background;
    text: {
        decoration: $for-table-cell-head-text-decoration;
        transform: $for-table-cell-head-text-transform;
        align: $for-table-cell-head-text-align;
    }
    border: {
        top: $for-table-cell-head-border-top;
        right: $for-table-cell-head-border-right;
        bottom: $for-table-cell-head-border-bottom;
        left: $for-table-cell-head-border-left;
        radius: #{$for-table-cell-head-border-radius-inner} / #{$for-table-cell-head-border-radius-outer};
    }
    padding: $for-table-cell-head-padding;
}

/// Generates a striped background for the rows and columns, should be applied to <table> or .for-table, as every first child would be interpreted as row and the second generation as column
/// @param {Map} $row [] - each element would be used according to its position in the map as the background for a row, repeatedly, when null uses default, when default null no row bg
/// @param {Map} $column [] - each element would be used according to its position in the map as the background for a column, overwrites already set row backgrounds, when null uses default, when default null no column bg
/// @param {Color} $row-selector [$for-table-bg-striped-row-selector] -
/// @param {Color} $column-selector [$for-table-bg-striped-column-selector] -
/// @param {Color} $row-hover [] - when null uses default, when default null no row bg on hover
/// @param {Color} $column-hover [] - when null uses default, when default null no column bg on hover
@mixin for-table-bg-striped($row: null, $column: null, $row-selector: $for-table-bg-striped-row-selector, $column-selector: $for-table-bg-striped-column-selector, $row-hover: null, $column-hover: null) {
    @if $row == null {
        $row: $for-table-bg-striped-row;
    }
    @if $row {
        $qty-row: length($row);
        $i-row: 1;
        @each $row-elem in $row {
            #{$row-selector}:nth-child(#{$qty-row}n+#{$i-row}) {
                background-color: $row-elem;
            }
            $i-row: $i-row + 1;
        }
    }
    @if $row-hover == null {
        $row-hover: $for-table-bg-striped-row-hover;
    }
    @if $row-hover {
        #{$row-selector}:hover {
            background-color: $row-hover;
        }
    }
    @if $column == null {
        $column: $for-table-bg-striped-column;
    }
    @if $column {
        $qty-column: length($column);
        $i-column: 1;
        @each $column-elem in $column {
            #{$column-selector}:nth-child(#{$qty-column}n+#{$i-column}) {
                background-color: $column-elem;
            }
            $i-column: $i-column + 1;
        }
    }
    @if $column-hover == null {
        $column-hover: $for-table-bg-striped-column-hover;
    }
    @if $column-hover {
        #{$column-selector}:hover {
            background-color: $column-hover;
        }
    }
}

/// Generates a striped background for the rows and columns, should be applied to <table> or .for-table, as every first child would be interpreted as row and the second generation as column
/// @param {Map} $row [] - working with 2, 4, only even quantities
/// @param {Color} $row-hover [] -
/// @param {Color} $column-hover [] -
@mixin for-table-bg-checkered($color: $for-table-bg-checkered-color, $row-selector: $for-table-bg-checkered-row-selector, $column-selector: $for-table-bg-checkered-column-selector, $row-hover: null, $column-hover: null) {

    $qty-color: length($color);

    @if not for-even($qty-color) {
        @warn 'The provided $color list is not in an even number, this could break the design!';
    }

    $i-row: 1;
    @each $color-elem-row in $color {
        #{$row-selector}:nth-child(#{$qty-color}n+#{$i-row}) {
            $i-col: 1;
            @each $color-elem-col in $color {
                #{$column-selector}:nth-child(#{$qty-color}n+#{$i-col}) {
                    @if ($i-row * $i-col) > $qty-color{
                        background-color: nth($color, $i-col);
                    } @else {
                        background-color: nth($color, $i-row * $i-col);
                    }
                }
                $i-col: $i-col + 1;
            }
        }
        $i-row: $i-row + 1;
    }
/*1 2 - 1 1 - 1 2
2 3 - 2 1 - 2 2
4 5 - 3 1 - 3 2

1 + 1 - 1 = 1, 1 + 2 - 1 = 2
2 + 1 - 1 = 2, 2 + 2 - 2 = 2

1 1 - 1 2 - 1 3
2 1 - 2 2 - 2 3
3 1 - 3 2 - 3 3*/

    /*@if $row-hover == null {
        $row-hover: $for-table-bg-striped-row-hover;
    }
    @if $row-hover {
        #{$row-selector}:hover {
            background-color: $row-hover;
        }
    }*/
}