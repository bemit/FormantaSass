////
/// Table
/// ================
/// selectors:
/// .for-table
/// .for-table-row
/// .for-table-cell
/// .for-table-cell-heading
/// @group Table
/// @author Michael Becker
////

/// Table base styling
@mixin for-table-base {
    font: $for-table-font-style $for-table-font-variant $for-table-font-weight #{$for-table-font-size}/#{$for-table-line-height} $for-table-font-family;
    text: {
        decoration: $for-table-text-decoration;
        transform: $for-table-text-transform;
        align: $for-table-text-align;
    }
    border: {
        top: $for-table-border-top;
        right: $for-table-border-right;
        bottom: $for-table-border-bottom;
        left: $for-table-border-left;
        radius: #{$for-table-border-radius-inner} / #{$for-table-border-radius-outer};
    }
    a {
        font: $for-table-link-font-style $for-table-link-font-variant $for-table-link-font-weight #{$for-table-link-font-size}/#{$for-table-line-height} $for-table-link-font-family;
        color: $for-table-link-font-color;
        text: {
            decoration: $for-table-link-text-decoration;
            transform: $for-table-link-text-transform;
            align: $for-table-link-text-align;
        }
        line: {
            height: $for-table-link-line-height;
        }
        &:hover {
            font: $for-table-link-hover-font-style $for-table-link-hover-font-variant $for-table-link-hover-font-weight $for-table-link-hover-font-size $for-table-link-hover-font-family;
            color: $for-table-link-hover-font-color;
            text: {
                decoration: $for-table-link-hover-text-decoration;
                transform: $for-table-link-hover-text-transform;
                align: $for-table-link-hover-text-align;
            }
        }
    }
}

/// A table container with all styling
/// @param {Bool} $for-expand [true] - if the table should be over the full available width
/// @param {Bool} $for-layout-fixed [true] - if the tables layout should be fixed, only with this it is possible to define cell widths through css
@mixin for-table($for-expand: true, $for-layout-fixed: true) {
    @if ($for-layout-fixed) {
        table-layout: fixed;
    }
    @if ($for-expand) {
        width: 100%;
    }
    display: table;
    @include for-table-base;
}

/// @output display: table-row
@mixin for-table-row {
    display: table-row;
}

/// @output display: table-cell
@mixin for-table-cell-base {
    display: table-cell;
}

/// Generates the border for a table-cell
/// @output border and display: table-cell
@mixin for-table-cell {
    border: {
        top: $for-table-cell-border-top;
        right: $for-table-cell-border-right;
        bottom: $for-table-cell-border-bottom;
        left: $for-table-cell-border-left;
        radius: #{$for-table-cell-border-radius-inner} / #{$for-table-cell-border-radius-outer};
    }
    @include for-table-cell-base;
}

/// Generates the styling of a table cell which should be used as a table heading
/// @output font and border styling as well as display: table-cell
@mixin for-table-cell-heading {
    @include for-table-cell-base;
    font: $for-table-cell-heading-font-style $for-table-cell-heading-font-variant $for-table-cell-heading-font-weight #{$for-table-cell-heading-font-size}/#{$for-table-cell-heading-line-height} $for-table-cell-heading-font-family;
    color: $for-table-cell-heading-font-color;
    background: $for-table-cell-heading-background;
    text: {
        decoration: $for-table-cell-heading-text-decoration;
        transform: $for-table-cell-heading-text-transform;
        align: $for-table-cell-heading-text-align;
    }
    border: {
        top: $for-table-cell-heading-border-top;
        right: $for-table-cell-heading-border-right;
        bottom: $for-table-cell-heading-border-bottom;
        left: $for-table-cell-heading-border-left;
        radius: #{$for-table-cell-heading-border-radius-inner} / #{$for-table-cell-heading-border-radius-outer};
    }
}

/// Generates a checkered background for a table
/// @param {Map} $row [] - each element would be used according to its position in the map as the background for a row, repeatedly
/// @param {Map} $column [] - each element would be used according to its position in the map as the background for a column, overwrites already set row backgrounds
@mixin for-table-bg-checkered($row, $column) {
    // TODO
}